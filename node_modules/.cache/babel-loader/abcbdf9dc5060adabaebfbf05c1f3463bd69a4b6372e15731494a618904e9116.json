{"ast":null,"code":"import axios from 'axios';\nimport { Notification, MessageBox, Message } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\nimport errorCode from '@/utils/errorCode';\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8';\n// 创建axios实例\nconst service = axios.create({\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\n  baseURL: \"http://localhost:7777\",\n  // 超时\n  timeout: 10000\n});\nfunction clearEmptyParam(config) {\n  ['data', 'params'].forEach(item => {\n    if (config[item]) {\n      const keys = Object.keys(config[item]);\n      if (keys.length) {\n        keys.forEach(key => {\n          const rawType = toRawType(config[item]);\n          if (['', undefined, null].includes(config[item][key]) && ['Object'].includes(rawType)) {\n            delete config[item][key];\n          }\n        });\n      }\n    }\n  });\n}\n// request拦截器\nservice.interceptors.request.use(config => {\n  // 是否需要设置 token\n  const isToken = (config.headers || {}).isToken === false;\n  if (getToken() && !isToken) {\n    config.headers['token'] = getToken(); // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n  // get请求映射params参数\n  // params加密\n  let url = config.url;\n  if (config.method === 'get' && config.params) {\n    // get参数编码\n    if (config.method === 'get' && config.params) {\n      url += '?';\n      let keys = Object.keys(config.params);\n      for (let key of keys) {\n        url += `${key}=${encodeURIComponent(config.params[key])}&`;\n      }\n      url = url.substring(0, url.length - 1);\n      config.params = {};\n    }\n    config.url = url;\n  }\n  clearEmptyParam(config);\n  return config;\n}, error => {\n  console.log(error);\n  Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(res => {\n  // 未设置状态码则默认成功状态\n  const code = res.data.code || 200;\n  // 获取错误信息\n  const msg = errorCode[code] || res.data.msg || errorCode['default'];\n  if (code === 401) {\n    MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n      confirmButtonText: '重新登录',\n      cancelButtonText: '取消',\n      type: 'warning'\n    }).then(() => {\n      store.dispatch('FedLogOut').then(() => {\n        location.href = '/login';\n      });\n    }).catch(() => {});\n    return Promise.reject('无效的会话，或者会话已过期，请重新登录。');\n  } else if (code === 500) {\n    Message({\n      message: msg,\n      type: 'error'\n    });\n    return Promise.reject(new Error(msg));\n  } else if (code !== 200) {\n    Notification.error({\n      title: msg\n    });\n    return Promise.reject('error');\n  } else {\n    //把字符串total 转换成 数字 total\n    if (res.data.data && res.data.data.total) {\n      res.data.data.total = parseInt(res.data.data.total);\n    }\n    return res.data.data;\n  }\n}, error => {\n  console.log('err' + error);\n  let {\n    message\n  } = error;\n  if (message === 'Network Error') {\n    message = '后端接口连接异常';\n  } else if (message.includes('timeout')) {\n    message = '系统接口请求超时';\n  } else if (message.includes('Request failed with status code')) {\n    message = '系统接口' + message.substr(message.length - 3) + '异常';\n  }\n  Message({\n    message: message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","Notification","MessageBox","Message","store","getToken","errorCode","defaults","headers","service","create","baseURL","timeout","clearEmptyParam","config","forEach","item","keys","Object","length","key","rawType","toRawType","undefined","includes","interceptors","request","use","isToken","url","method","params","encodeURIComponent","substring","error","console","log","Promise","reject","response","res","code","data","msg","confirm","confirmButtonText","cancelButtonText","type","then","dispatch","location","href","catch","message","Error","title","total","parseInt","substr","duration"],"sources":["E:/homework/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { Notification, MessageBox, Message } from 'element-ui'\nimport store from '@/store'\nimport { getToken } from '@/utils/auth'\nimport errorCode from '@/utils/errorCode'\n\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8'\n// 创建axios实例\nconst service = axios.create({\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\n  baseURL: \"http://localhost:7777\",\n  // 超时\n  timeout: 10000\n})\nfunction clearEmptyParam(config) {\n  ['data', 'params'].forEach(item => {\n    if (config[item]) {\n      const keys = Object.keys(config[item])\n      if (keys.length) {\n        keys.forEach(key => {\n          const rawType = toRawType(config[item])\n          if (['', undefined, null].includes(config[item][key]) &&\n              ['Object'].includes(rawType)) {\n            delete config[item][key]\n          }\n        })\n      }\n    }\n  })\n}\n// request拦截器\nservice.interceptors.request.use(config => {\n  // 是否需要设置 token\n  const isToken = (config.headers || {}).isToken === false\n  if (getToken() && !isToken) {\n    config.headers['token'] = getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n  // get请求映射params参数\n  // params加密\n  let url = config.url\n  if (config.method === 'get' && config.params) {\n    // get参数编码\n    if (config.method === 'get' && config.params) {\n      url += '?'\n      let keys = Object.keys(config.params)\n      for (let key of keys) {\n        url += `${key}=${encodeURIComponent(config.params[key])}&`\n      }\n      url = url.substring(0, url.length - 1)\n      config.params = {}\n    }\n    config.url = url\n  }\n  clearEmptyParam(config);\n  return config\n}, error => {\n  console.log(error)\n  Promise.reject(error)\n})\n\n// 响应拦截器\nservice.interceptors.response.use(res => {\n  // 未设置状态码则默认成功状态\n  const code = res.data.code || 200\n  // 获取错误信息\n  const msg = errorCode[code] || res.data.msg || errorCode['default']\n  if (code === 401) {\n    MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n      confirmButtonText: '重新登录',\n      cancelButtonText: '取消',\n      type: 'warning'\n    }\n    ).then(() => {\n      store.dispatch('FedLogOut').then(() => {\n        location.href = '/login'\n      })\n    }).catch(() => { })\n    return Promise.reject('无效的会话，或者会话已过期，请重新登录。')\n  } else if (code === 500) {\n    Message({\n      message: msg,\n      type: 'error'\n    })\n    return Promise.reject(new Error(msg))\n  } else if (code !== 200) {\n    Notification.error({\n      title: msg\n    })\n    return Promise.reject('error')\n  } else {\n    //把字符串total 转换成 数字 total\n    if (res.data.data && res.data.data.total) {\n      res.data.data.total = parseInt(res.data.data.total)\n    }\n    return res.data.data\n  }\n},\nerror => {\n  console.log('err' + error)\n  let { message } = error\n  if (message === 'Network Error') {\n    message = '后端接口连接异常'\n  } else if (message.includes('timeout')) {\n    message = '系统接口请求超时'\n  } else if (message.includes('Request failed with status code')) {\n    message = '系统接口' + message.substr(message.length - 3) + '异常'\n  }\n  Message({\n    message: message,\n    type: 'error',\n    duration: 5 * 1000\n  })\n  return Promise.reject(error)\n}\n)\n\nexport default service\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}