{"ast":null,"code":"import axios from 'axios';\nimport { Notification, MessageBox, Message } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\nimport errorCode from '@/utils/errorCode';\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8';\n// 创建axios实例\nconst service = axios.create({\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\n  baseURL: process.env.VUE_APP_BASE_API,\n  // 超时\n  timeout: 10000\n});\n// request拦截器\nservice.interceptors.request.use(config => {\n  // 是否需要设置 token\n  const isToken = (config.headers || {}).isToken === false;\n  if (getToken() && !isToken) {\n    config.headers['token'] = getToken(); // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n  // get请求映射params参数\n  // params加密\n  let url = config.url;\n  if (config.method === 'get' && config.params) {\n    // get参数编码\n    if (config.method === 'get' && config.params) {\n      url += '?';\n      let keys = Object.keys(config.params);\n      for (let key of keys) {\n        url += `${key}=${encodeURIComponent(config.params[key])}&`;\n      }\n      url = url.substring(0, url.length - 1);\n      config.params = {};\n    }\n    config.url = url;\n  }\n  return config;\n}, error => {\n  console.log(error);\n  Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(res => {\n  // 未设置状态码则默认成功状态\n  const code = res.data.code || 200;\n  // 获取错误信息\n  const msg = errorCode[code] || res.data.msg || errorCode['default'];\n  if (code === 401) {\n    MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n      confirmButtonText: '重新登录',\n      cancelButtonText: '取消',\n      type: 'warning'\n    }).then(() => {\n      store.dispatch('FedLogOut').then(() => {\n        location.href = '/index';\n      });\n    }).catch(() => {});\n    return Promise.reject('无效的会话，或者会话已过期，请重新登录。');\n  } else if (code === 500) {\n    Message({\n      message: msg,\n      type: 'error'\n    });\n    return Promise.reject(new Error(msg));\n  } else if (code !== 200) {\n    Notification.error({\n      title: msg\n    });\n    return Promise.reject('error');\n  } else {\n    //把字符串total 转换成 数字 total\n    if (res.data.data && res.data.data.total) {\n      res.data.data.total = parseInt(res.data.data.total);\n    }\n    return res.data.data;\n  }\n}, error => {\n  console.log('err' + error);\n  let {\n    message\n  } = error;\n  if (message === 'Network Error') {\n    message = '后端接口连接异常';\n  } else if (message.includes('timeout')) {\n    message = '系统接口请求超时';\n  } else if (message.includes('Request failed with status code')) {\n    message = '系统接口' + message.substr(message.length - 3) + '异常';\n  }\n  Message({\n    message: message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","Notification","MessageBox","Message","store","getToken","errorCode","defaults","headers","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","request","use","config","isToken","url","method","params","keys","Object","key","encodeURIComponent","substring","length","error","console","log","Promise","reject","response","res","code","data","msg","confirm","confirmButtonText","cancelButtonText","type","then","dispatch","location","href","catch","message","Error","title","total","parseInt","includes","substr","duration"],"sources":["E:/homework/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { Notification, MessageBox, Message } from 'element-ui'\nimport store from '@/store'\nimport { getToken } from '@/utils/auth'\nimport errorCode from '@/utils/errorCode'\n\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8'\n// 创建axios实例\nconst service = axios.create({\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\n  baseURL: process.env.VUE_APP_BASE_API,\n  // 超时\n  timeout: 10000\n})\n// request拦截器\nservice.interceptors.request.use(config => {\n  // 是否需要设置 token\n  const isToken = (config.headers || {}).isToken === false\n  if (getToken() && !isToken) {\n    config.headers['token'] = getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n  // get请求映射params参数\n  // params加密\n  let url = config.url\n  if (config.method === 'get' && config.params) {\n    // get参数编码\n    if (config.method === 'get' && config.params) {\n      url += '?'\n      let keys = Object.keys(config.params)\n      for (let key of keys) {\n        url += `${key}=${encodeURIComponent(config.params[key])}&`\n      }\n      url = url.substring(0, url.length - 1)\n      config.params = {}\n    }\n    config.url = url\n  }\n  return config\n}, error => {\n  console.log(error)\n  Promise.reject(error)\n})\n\n// 响应拦截器\nservice.interceptors.response.use(res => {\n  // 未设置状态码则默认成功状态\n  const code = res.data.code || 200\n  // 获取错误信息\n  const msg = errorCode[code] || res.data.msg || errorCode['default']\n  if (code === 401) {\n    MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n      confirmButtonText: '重新登录',\n      cancelButtonText: '取消',\n      type: 'warning'\n    }\n    ).then(() => {\n      store.dispatch('FedLogOut').then(() => {\n        location.href = '/index'\n      })\n    }).catch(() => { })\n    return Promise.reject('无效的会话，或者会话已过期，请重新登录。')\n  } else if (code === 500) {\n    Message({\n      message: msg,\n      type: 'error'\n    })\n    return Promise.reject(new Error(msg))\n  } else if (code !== 200) {\n    Notification.error({\n      title: msg\n    })\n    return Promise.reject('error')\n  } else {\n    //把字符串total 转换成 数字 total\n    if (res.data.data && res.data.data.total) {\n      res.data.data.total = parseInt(res.data.data.total)\n    }\n    return res.data.data\n  }\n},\nerror => {\n  console.log('err' + error)\n  let { message } = error\n  if (message === 'Network Error') {\n    message = '后端接口连接异常'\n  } else if (message.includes('timeout')) {\n    message = '系统接口请求超时'\n  } else if (message.includes('Request failed with status code')) {\n    message = '系统接口' + message.substr(message.length - 3) + '异常'\n  }\n  Message({\n    message: message,\n    type: 'error',\n    duration: 5 * 1000\n  })\n  return Promise.reject(error)\n}\n)\n\nexport default service\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}